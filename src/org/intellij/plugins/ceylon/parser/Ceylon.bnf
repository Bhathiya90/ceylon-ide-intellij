{
	parserClass="org.intellij.plugins.ceylon.parser.CeylonParser"
	stubParserClass="org.intellij.plugins.ceylon.parser.CeylonParserUtil"

	implements="org.intellij.plugins.ceylon.psi.CeylonCompositeElement"
	extends="org.intellij.plugins.ceylon.psi.impl.CeylonCompositeElementImpl"

	psiClassPrefix="Ceylon"
	psiImplClassSuffix="Impl"

	psiPackage="org.intellij.plugins.ceylon.psi"
	psiImplPackage="org.intellij.plugins.ceylon.psi.impl"

	psiImplUtilClass="org.intellij.plugins.ceylon.psi.CeylonPsiUtils"

	elementTypeHolderClass="org.intellij.plugins.ceylon.psi.CeylonTypes"
	elementTypeClass="org.intellij.plugins.ceylon.psi.CeylonElementType"
	tokenTypeClass="org.intellij.plugins.ceylon.psi.CeylonTokenType"

	tokens = [
	    OP_COMMA=","
	    OP_SEMI_COLUMN=";"
	    OP_ELLIPSIS="..."
        OP_SHARP="#"
	    OP_LBRACE="{"
	    OP_RBRACE="}"
	    OP_LPAREN="("
	    OP_RPAREN=")"
	    OP_LBRACKET="["
	    OP_RBRACKET="]"
	    OP_BRACKETS="[]"
	    OP_DOT="."
	    OP_DOT_QUESTION="?."
	    OP_BRACKETS_DOT="[]."
	    OP_EQUALS="="
	    OP_PLUS="+"
	    OP_MINUS="-"
	    OP_DIVIDE="/"
	    OP_MULTIPLY="*"
	    OP_MODULO="%"
	    OP_MULT_MULT="**"
	    OP_PLUS_PLUS="++"
	    OP_MIN_MIN="--"
	    OP_DOT_DOT=".."
	    OP_ARROW="->"
	    OP_QUESTION="?"
	    OP_NOT="!"
	    OP_LOGICAL_AND="&&"
	    OP_LOGICAL_OR="||"
	    OP_TIDLE="~"
	    OP_INTERSECTION="&"
	    OP_UNION="|"
	    OP_XOR="^"
	    OP_EQ_EQ_EQ="==="
	    OP_EQ_EQ="=="
	    OP_EXCL_EQ="!="
	    OP_LT="<"
	    OP_GT=">"
	    OP_LTE="<="
	    OP_GTE=">="
	    OP_DIFFERENT="<=>"
	    OP_ASSIGN=":="
	    OP_DOT_EQ=".="
	    OP_PLUS_EQ="+="
	    OP_MINUS_EQ="-="
	    OP_DIV_EQ="/="
	    OP_MULT_EQ="*="
	    OP_MOD_EQ="%="
	    OP_OR_EQ="|="
	    OP_AND_EQ="&="
	    OP_XOR_EQ="^="
	    OP_NOT_EQ="~="
	    OP_LOG_OR_EQ="||="
	    OP_LOG_AND_EQ="&&="
	    OP_ANNOTATION="@"

        KW_ADAPTS="adapts"
        KW_ABSTRACTS="abstracts"
        KW_ASSIGN="assign"
        KW_BREAK="break"
        KW_CASE="case"
        KW_CATCH="catch"
        KW_CLASS="class"
        KW_CONTINUE="continue"
        KW_ELSE="else"
        KW_EXISTS="exists"
        KW_EXTENDS="extends"
        KW_FINALLY="finally"
        KW_FOR="for"
        KW_FUNCTION="function"
        KW_GIVEN="given"
        KW_IF="if"
        KW_IMPORT="import"
        KW_IN="in"
        KW_INTERFACE="interface"
        KW_IS="is"
        KW_MODULE="module" // not listed in documented keywords :-/
        KW_NONEMPTY="nonempty"
        KW_OBJECT="object"
        KW_OF="of"
        KW_OUT="out"
        KW_OUTER="outer"
        KW_PACKAGE="package" // not listed in documented keywords :-/
        KW_RETURN="return"
        KW_SATISFIES="satisfies"
        KW_SUPER="super"
        KW_SWITCH="switch"
        KW_THEN="then"
        KW_THIS="this"
        KW_THROW="throw"
        KW_TRY="try"
        KW_VALUE="value"
        KW_VOID="void"
        KW_WHILE="while"
	]
}

external ceylon ::= parseCeylon compilationUnit

private compilationUnit ::= (compilerAnnotations ";")?
      (
        comment
        | compilerAnnotations annotations (moduleDescriptor | packageDescriptor)
        | importList? (compilerAnnotations declaration)+ // TODO was * instead of +
      )
    {recoverUntil=ceylon_statement_recover}

private ceylon_statement_recover ::= (!compilationUnit)

private comment ::= LINE_COMMENT | MULTI_LINE_COMMENT

moduleDescriptor ::= "module" packagePath QUOTED_LITERAL importModuleList

importModuleList ::= "{" (compilerAnnotations annotations importModule)* "}"

packageDescriptor ::= "package" packagePath ";"

importModule ::= "import" (QUOTED_LITERAL | packagePath) QUOTED_LITERAL ";"

importList  ::=  importDeclaration+

importDeclaration ::= "import" (packagePath) importElementList

importElementList ::= "{" (importElement ( "," (importElement | importWildcard))* | importWildcard )? "}"

importElement ::= compilerAnnotations importName ("=" importName)? importElementList?

importWildcard ::= "..."

importName ::= memberName | typeName

packagePath ::= packageName ("." packageName)*

packageName ::= LIDENTIFIER | UIDENTIFIER

typeName ::= UIDENTIFIER {
    mixin="org.intellij.plugins.ceylon.psi.impl.CeylonIdentifier"
}

annotationName ::= LIDENTIFIER

memberName ::= LIDENTIFIER

objectDeclaration ::= "object" memberName extendedType? satisfiedTypes? (classBody | ";")

voidOrInferredMethodDeclaration ::= ("void" | "function") memberName typeParameters? parameters* /*metatypes? */ typeConstraints? (block | specifier? ";")

setterDeclaration ::= "assign" memberName (block | ";")

inferredAttributeDeclaration ::= "value" memberName ((specifier | initializer)? ";" | block)

typedMethodOrAttributeDeclaration ::= type memberName
    (
        typeParameters? parameters+ /*metatypes?*/ typeConstraints? (block | specifier? ";")
      | (specifier | initializer)? ";"
      | block
    )

interfaceDeclaration ::= "interface" typeName
        typeParameters? caseTypes? /*metatypes?*/ adaptedTypes? satisfiedTypes?
        typeConstraints? (interfaceBody | typeSpecifier? ";") {
     pin=1
     stub="org.intellij.plugins.ceylon.psi.stub.ClassStub"
     elementTypeClass="org.intellij.plugins.ceylon.psi.stub.impl.ClassElementType"
     implements="org.intellij.plugins.ceylon.psi.CeylonNamedDeclaration"
     customImpl="org.intellij.plugins.ceylon.psi.impl.CeylonClassImpl"
}

classDeclaration  ::= "class" typeName
        typeParameters? parameters? caseTypes? /*metatypes?*/ extendedType? satisfiedTypes?
        typeConstraints? (classBody | typeSpecifier? ";") {
    pin=1
    stub="org.intellij.plugins.ceylon.psi.stub.ClassStub"
    elementTypeClass="org.intellij.plugins.ceylon.psi.stub.impl.ClassElementType"
    implements="org.intellij.plugins.ceylon.psi.CeylonNamedDeclaration"
    customImpl="org.intellij.plugins.ceylon.psi.impl.CeylonClassImpl"
}

aliasDeclaration ::= "alias" typeName typeParameters? typeConstraints? typeSpecifier? ";" {
    implements="org.intellij.plugins.ceylon.psi.CeylonNamedDeclaration"
}

assertion ::= ASSERT conditions ";"

block ::="{" declarationOrStatement* "}"

interfaceBody ::= "{" declarationOrStatement* "}"

classBody ::= "{" declarationOrStatement* "}"

extendedType ::= "extends" (qualifiedType | "super" "." typeReference) positionalArguments // TODO "positionalArguments?"

satisfiedTypes ::= "satisfies" qualifiedType ("&" qualifiedType)*

abstractedType ::= "abstracts" qualifiedType

adaptedTypes ::= "adapts" qualifiedType ("&" qualifiedType)*

caseTypes ::= "of" caseType ("|" caseType)*

caseType ::= qualifiedType | memberName

parameters ::= "(" (parameterDeclaration ("," parameterDeclaration)*)? ")"

parameter ::= parameterType memberName (parameters+ | valueParameter?) specifier?

parameterRef ::= memberName specifier?

parameterDeclaration ::= compilerAnnotations (parameterRef | annotations parameter)

valueParameter ::= "->" type memberName

parameterType ::= type "..."? | "void"

typeParameters ::= "<" typeParameter ("," typeParameter)* ">"

typeParameter ::= variance? typeName "..."?

variance ::= "in" | "out"

typeConstraint ::= compilerAnnotations "given" typeName parameters? caseTypes? /*metatypes?*/ satisfiedTypes? abstractedType?

typeConstraints ::= typeConstraint+

declarationOrStatement ::=compilerAnnotations
      ( 
        annotation* (assertion | declaration)
      | statement
      | comment
      )

declaration ::= annotations (objectDeclaration | setterDeclaration | voidOrInferredMethodDeclaration | inferredAttributeDeclaration
    | typedMethodOrAttributeDeclaration | classDeclaration | interfaceDeclaration | aliasDeclaration)

statement ::= directiveStatement | controlStatement | expressionOrSpecificationStatement

expressionOrSpecificationStatement ::= expression specifier? (";" | ",")

directiveStatement ::= directive ";"

directive ::= returnDirective | throwDirective | breakDirective | continueDirective

returnDirective ::= "return" functionOrExpression?

throwDirective ::= "throw" expression?

breakDirective ::= "break"

continueDirective ::= "continue"

typeSpecifier ::= "=" type

specifier ::= "=" functionOrExpression

initializer ::= ":=" expression

expression ::= assignmentExpression

base ::= nonstringLiteral | stringExpression | enumeration | selfReference | parExpression | baseReference

baseReference ::= supertypeQualifier? (memberReference | typeReference)

supertypeQualifier ::= typeName "::"

primary ::= base (qualifiedReference | arguments | indexOrIndexRange)*

qualifiedReference ::= memberSelectionOperator (memberReference | typeReference)

memberSelectionOperator ::= "." | "?." | "[]."

elementSelectionOperator ::= "?[" | "["

enumeration ::= "{"  (sequencedArgument | comprehension)? "}"

expressions ::= expression ("," expression)*

memberReference ::= memberName typeArguments?

typeReference ::= typeName typeArguments?

indexOrIndexRange ::= elementSelectionOperator index ("..." | ".."  index | ":" index)? "]"

index ::= additiveExpression

arguments ::= positionalArguments | namedArguments

namedArguments ::= "{" namedArgument* (sequencedArgument | comprehension)? "}"

sequencedArgument ::= compilerAnnotations expressions "..."?

namedArgument ::= compilerAnnotations (namedSpecifiedArgument | namedArgumentDeclaration)

namedSpecifiedArgument ::= memberName specifier ";"

objectArgument ::= "object" memberName extendedType? satisfiedTypes? (classBody | ";")

voidOrInferredMethodArgument ::= ("void" | "function") memberName parameters* block

inferredGetterArgument ::= "value" memberName block

typedMethodOrGetterArgument ::= type memberName parameters* block

namedArgumentDeclaration ::= objectArgument | typedMethodOrGetterArgument | voidOrInferredMethodArgument | inferredGetterArgument

parExpression  ::= "(" assignmentExpression ")"

positionalArguments ::= "(" (positionalArgument ("," positionalArgument)* "..."?)? comprehension? ")"

positionalArgument ::= functionOrExpression

functionOrExpression ::= "function"? parameters parameters* "=>" expression | expression

comprehension ::= forComprehensionClause

comprehensionClause ::= forComprehensionClause | ifComprehensionClause | expressionComprehensionClause

expressionComprehensionClause ::= expression

forComprehensionClause ::= "for" forIterator comprehensionClause

ifComprehensionClause ::= "if" conditions comprehensionClause

assignmentExpression ::= thenElseExpression (assignmentOperator assignmentExpression)?

assignmentOperator ::= ":=" | "+=" | "-=" | "*=" | "/=" | "%=" | "&=" | "|=" | "^=" | "~=" | "&&=" | "||="

thenElseExpression ::= disjunctionExpression (thenElseOperator disjunctionExpression)*

thenElseOperator ::= "else" | "then"

disjunctionExpression ::= conjunctionExpression (disjunctionOperator conjunctionExpression)*

disjunctionOperator ::= "||"

conjunctionExpression ::= logicalNegationExpression (conjunctionOperator logicalNegationExpression)*

conjunctionOperator ::= "&&"

logicalNegationExpression ::= notOperator logicalNegationExpression | equalityExpression

notOperator ::= "!"

equalityExpression ::= comparisonExpression (equalityOperator comparisonExpression)?

equalityOperator ::= "==" | "!=" | "==="

comparisonExpression ::= existenceEmptinessExpression (comparisonOperator existenceEmptinessExpression | typeOperator type)?
    | typeOperator comparableType existenceEmptinessExpression

comparableType ::= unionTypeExpression

comparisonOperator ::= "<=>" | "<=" | ">=" | ">" | "<" | "in"

typeOperator ::= "is" | "extends" | "satisfies"

existenceEmptinessExpression ::= rangeIntervalEntryExpression existsNonemptyOperator? | existsNonemptyOperator rangeIntervalEntryExpression

existsNonemptyOperator ::= "exists" | "nonempty"

rangeIntervalEntryExpression ::= additiveExpression (rangeIntervalEntryOperator additiveExpression)?

rangeIntervalEntryOperator ::= ".." | ":" | "->"

additiveExpression ::= multiplicativeExpression (additiveOperator multiplicativeExpression)*

additiveOperator ::= "+" | "-" | "|" | "^" | "~"

multiplicativeExpression ::= defaultExpression (multiplicativeOperator defaultExpression)*

multiplicativeOperator ::= "*" | "/" | "%" | "&"

defaultExpression ::= negationComplementExpression (defaultOperator negationComplementExpression)*

defaultOperator ::= "default"

negationComplementExpression ::= unaryMinusOrComplementOperator negationComplementExpression | exponentiationExpression

unaryMinusOrComplementOperator ::= "-" | "+"

exponentiationExpression ::= incrementDecrementExpression (exponentiationOperator exponentiationExpression)?

exponentiationOperator ::= "**"

incrementDecrementExpression ::= prefixOperator incrementDecrementExpression | postfixIncrementDecrementExpression

prefixOperator ::= "--" | "++"

postfixIncrementDecrementExpression ::= primary postfixOperator*

postfixOperator ::= "--" | "++"

selfReference ::= "this" | "super" | "outer"

nonstringLiteral ::= NATURAL_LITERAL | FLOAT_LITERAL | QUOTED_LITERAL | CHAR_LITERAL

stringExpression ::= stringTemplate | myStringLiteral

myStringLiteral ::= STRING_LITERAL

stringTemplate ::= myStringLiteral (expression myStringLiteral)+

typeArguments ::= "<" typeArgument ("," typeArgument)* ">"

typeArgument ::= type "..."?

type ::= unionType

entryType ::= abbreviatedType ("->" abbreviatedType)?

unionType ::= intersectionType ("|" intersectionType)*

intersectionType ::= entryType ("&" entryType)*

abbreviatedType ::= qualifiedType ("?" | "[]" | "(" (type ("," type)* )? ")")*

unionTypeExpression ::= intersectionTypeExpression (("|" intersectionTypeExpression)+)?

intersectionTypeExpression ::=qualifiedType ("&" qualifiedType)*

qualifiedType ::= supertypeQualifier? typeNameWithArguments ("." typeNameWithArguments)*

typeNameWithArguments ::= typeName typeArguments?

annotations ::= annotation*

annotation ::= annotationName annotationArguments

annotationArguments ::= arguments | literalArguments

literalArguments ::= literalArgument*

literalArgument ::= nonstringLiteral | myStringLiteral

compilerAnnotations ::= compilerAnnotation*

compilerAnnotation ::= "@" annotationName ("[" myStringLiteral "]")?

conditions ::= "(" (condition ("," condition)*)? ")"

condition ::= existsCondition | nonemptyCondition | isCondition | satisfiesCondition | booleanCondition

booleanCondition ::= expression

existsCondition ::= "exists" (impliedVariable | specifiedVariable) | booleanCondition

nonemptyCondition ::= "nonempty" (impliedVariable | specifiedVariable) | booleanCondition

isCondition ::= ("!")? "is" type (impliedVariable | memberName specifier) | booleanCondition

satisfiesCondition ::= "satisfies" (qualifiedType qualifiedType)?

controlStatement ::= ifElse | switchCaseElse | whileLoop | forElse | tryCatchFinally

controlBlock ::= block

ifElse ::= ifBlock elseBlock?

ifBlock ::= "if" conditions controlBlock

elseBlock ::= "else" (elseIf | block)

elseIf ::= ifElse

switchCaseElse ::= switchHeader cases

switchHeader ::= "switch" "(" expression? ")"

cases ::= caseBlock+ defaultCaseBlock?

caseBlock ::= "case" "(" caseItem? ")" block

defaultCaseBlock ::= "else" block

caseItem ::= isCaseCondition | satisfiesCaseCondition | matchCaseCondition

matchCaseCondition ::= expressions

isCaseCondition ::= "is" type

satisfiesCaseCondition ::= "satisfies" qualifiedType

forElse ::= forBlock failBlock?

forBlock ::= "for" forIterator controlBlock

failBlock ::= "else" block

forIterator ::= "(" compilerAnnotations (var (containment | "->" var containment)?)? ")"

containment ::= "in" expression?

whileLoop ::= whileBlock

whileBlock ::= "while" conditions controlBlock

tryCatchFinally ::= tryBlock catchBlock* finallyBlock?

tryBlock ::= "try" (resource controlBlock | block)

catchBlock ::= "catch" catchVariable block

catchVariable ::= "(" variable? ")"

finallyBlock ::= "finally" block

resource ::= "(" (specifiedVariable | expression)? ")"

specifiedVariable ::= variable specifier?

variable ::= compilerAnnotations var

var ::= (type | "void" | "function" | "value") memberName parameters* | memberName | memberName parameters+

impliedVariable ::= memberName
