/* The following code was generated by JFlex 1.4.1 on 30/11/12 17:06 */

package org.intellij.plugins.ceylon.parser;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import org.intellij.plugins.ceylon.psi.CeylonTypes;
import com.intellij.psi.TokenType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 30/11/12 17:06 from the specification file
 * <tt>D:/dev/CeylonIDEA/src/org/intellij/plugins/ceylon/parser/Ceylon.flex</tt>
 */
class _CeylonLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int IN_IMPORT = 0;
  public static final int YYINITIAL = 0;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\2\1\0\1\1\1\3\22\0\1\4\1\7\1\42"+
    "\1\6\1\0\1\74\1\75\1\44\1\67\1\70\1\10\1\25\1\65"+
    "\1\26\1\21\1\5\12\15\1\101\1\66\1\100\1\11\1\12\1\73"+
    "\1\102\4\50\1\23\1\50\1\30\1\14\1\20\3\14\1\30\2\14"+
    "\1\30\3\14\1\30\6\14\1\71\1\16\1\72\1\77\1\22\1\36"+
    "\1\54\1\37\1\52\1\47\1\24\1\35\1\57\1\62\1\17\1\56"+
    "\1\27\1\53\1\31\1\33\1\51\1\34\1\13\1\41\1\55\1\40"+
    "\1\32\1\60\1\63\1\61\1\64\1\13\1\45\1\43\1\46\1\76"+
    "\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\1\1\11\1\14\1\11"+
    "\1\15\1\16\4\11\1\1\3\11\1\1\1\17\1\1"+
    "\1\20\1\21\7\11\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\1"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\13\2\0\1\13\1\47\2\0\1\11\1\50"+
    "\1\51\1\52\1\53\1\54\2\11\1\55\1\56\1\57"+
    "\1\60\1\61\6\11\2\0\1\62\4\11\2\0\1\63"+
    "\1\64\1\65\1\0\1\66\1\11\1\67\16\11\1\70"+
    "\1\71\1\72\1\73\1\74\1\75\1\76\1\77\1\100"+
    "\2\37\1\40\1\101\1\13\1\47\1\0\2\11\1\102"+
    "\10\11\1\103\3\0\1\11\1\104\4\11\2\0\1\105"+
    "\1\106\17\11\1\107\1\110\1\111\1\40\1\13\1\47"+
    "\2\0\2\11\1\112\7\11\2\0\1\11\1\113\1\114"+
    "\2\11\2\0\5\11\1\115\7\11\1\116\2\11\2\47"+
    "\1\0\1\13\11\11\2\0\1\117\1\120\1\11\2\0"+
    "\1\121\2\11\1\122\1\123\3\11\1\124\2\11\1\125"+
    "\1\126\1\127\1\47\1\0\1\47\1\0\1\130\1\11"+
    "\1\131\1\11\1\132\4\11\1\0\1\133\1\0\1\134"+
    "\2\11\1\135\1\136\1\11\1\137\2\47\1\0\1\11"+
    "\1\140\1\11\1\141\1\142\1\11\2\0\3\11\2\47"+
    "\1\0\1\11\1\143\1\144\2\0\1\145\2\11\2\47"+
    "\1\146\2\0\1\147\1\150\4\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[308];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\103\0\103\0\206\0\311\0\u010c\0\u014f\0\u0192"+
    "\0\u01d5\0\u0218\0\u025b\0\u029e\0\u02e1\0\u0324\0\u0367\0\u03aa"+
    "\0\u03ed\0\u0430\0\u0473\0\u04b6\0\u04f9\0\u053c\0\u057f\0\u05c2"+
    "\0\u0605\0\u0648\0\u068b\0\u06ce\0\u0711\0\103\0\103\0\u0754"+
    "\0\u0797\0\u07da\0\u081d\0\u0860\0\u08a3\0\u08e6\0\103\0\103"+
    "\0\103\0\103\0\u0929\0\103\0\u096c\0\u09af\0\u09f2\0\u0a35"+
    "\0\u0a78\0\u0abb\0\u0afe\0\103\0\u0b41\0\u0b84\0\103\0\103"+
    "\0\103\0\103\0\u0bc7\0\103\0\u0c0a\0\u0c4d\0\u0c90\0\103"+
    "\0\103\0\u0218\0\u025b\0\u0cd3\0\u0d16\0\u0218\0\u0218\0\103"+
    "\0\u0d59\0\u0d9c\0\u0ddf\0\103\0\103\0\103\0\103\0\103"+
    "\0\u0e22\0\u0e65\0\u0ea8\0\u0eeb\0\u0f2e\0\u0f71\0\u0fb4\0\u0ff7"+
    "\0\103\0\u103a\0\u107d\0\u10c0\0\u1103\0\u068b\0\u1146\0\103"+
    "\0\103\0\u1189\0\u0711\0\103\0\u11cc\0\u0218\0\u120f\0\u1252"+
    "\0\u1295\0\u12d8\0\u131b\0\u135e\0\u13a1\0\u13e4\0\u1427\0\u146a"+
    "\0\u14ad\0\u14f0\0\u1533\0\u1576\0\u15b9\0\103\0\103\0\103"+
    "\0\u15fc\0\103\0\103\0\u163f\0\103\0\103\0\u1682\0\u16c5"+
    "\0\103\0\u1708\0\u174b\0\u178e\0\u17d1\0\u1814\0\103\0\u1857"+
    "\0\u189a\0\u18dd\0\u1920\0\u1963\0\u19a6\0\u19e9\0\u1a2c\0\u0218"+
    "\0\u1a6f\0\u1ab2\0\u1af5\0\u1b38\0\u0218\0\u1b7b\0\u1bbe\0\u1c01"+
    "\0\u1c44\0\u1c87\0\u1cca\0\103\0\u1d0d\0\u1d50\0\u1d93\0\u1dd6"+
    "\0\u1e19\0\u1e5c\0\u1e9f\0\u1ee2\0\u1f25\0\u1f68\0\u1fab\0\u1fee"+
    "\0\u2031\0\u2074\0\u20b7\0\u20fa\0\103\0\103\0\103\0\103"+
    "\0\u213d\0\u2180\0\u21c3\0\u2206\0\u2249\0\u228c\0\u0218\0\u22cf"+
    "\0\u2312\0\u2355\0\u2398\0\u23db\0\u241e\0\u2461\0\u24a4\0\u24e7"+
    "\0\u252a\0\u0218\0\u0218\0\u256d\0\u25b0\0\u25f3\0\u2636\0\u2679"+
    "\0\u26bc\0\u26ff\0\u2742\0\u2785\0\u0218\0\u27c8\0\u280b\0\u284e"+
    "\0\u2891\0\u28d4\0\u2917\0\u295a\0\u0218\0\u299d\0\u29e0\0\u2a23"+
    "\0\u2a66\0\u2aa9\0\u2aec\0\u2b2f\0\u2b72\0\u2bb5\0\u2bf8\0\u2c3b"+
    "\0\u2c7e\0\u2cc1\0\u2d04\0\u2d47\0\u2d8a\0\u2dcd\0\u0218\0\u0218"+
    "\0\u2e10\0\u2e53\0\u2e96\0\u0218\0\u2ed9\0\u2f1c\0\u0218\0\u0218"+
    "\0\u2f5f\0\u2fa2\0\u2fe5\0\u0218\0\u3028\0\u306b\0\u0218\0\u0218"+
    "\0\u0218\0\u30ae\0\u30f1\0\u3134\0\u3177\0\u0218\0\u31ba\0\u0218"+
    "\0\u31fd\0\u0218\0\u3240\0\u3283\0\u32c6\0\u3309\0\u334c\0\u0218"+
    "\0\u338f\0\u0218\0\u33d2\0\u3415\0\u0218\0\u0218\0\u3458\0\u0218"+
    "\0\u349b\0\u34de\0\u3521\0\u3564\0\u0218\0\u35a7\0\u0218\0\u0218"+
    "\0\u35ea\0\u362d\0\u3670\0\u36b3\0\u36f6\0\u3739\0\u377c\0\u37bf"+
    "\0\u3802\0\u3845\0\u0218\0\u0218\0\u3888\0\u38cb\0\u0218\0\u390e"+
    "\0\u3951\0\u3994\0\u39d7\0\u0218\0\u3a1a\0\u3a5d\0\u0218\0\u0218"+
    "\0\u3aa0\0\u3ae3\0\u3b26\0\u3b69";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[308];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\4\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\13\1\17\1\12"+
    "\1\13\1\20\1\21\1\22\1\12\1\13\1\23\1\12"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\12\1\13\1\40\1\41"+
    "\1\12\1\42\1\43\1\12\1\44\1\45\2\12\1\46"+
    "\1\12\1\47\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\1\57\1\60\1\61\1\62\1\63\1\64\110\0"+
    "\1\65\2\0\1\66\1\67\100\0\1\65\104\0\1\70"+
    "\101\0\1\71\1\72\102\0\1\73\102\0\1\74\104\0"+
    "\3\12\1\0\2\12\1\0\3\12\2\0\7\12\1\0"+
    "\3\12\5\0\16\12\31\0\3\13\1\0\2\13\1\0"+
    "\3\13\2\0\7\13\1\0\3\13\5\0\16\13\33\0"+
    "\1\75\3\0\1\76\1\77\4\0\2\100\5\101\64\0"+
    "\1\102\1\103\75\0\3\12\1\0\2\12\1\0\3\12"+
    "\2\0\2\12\1\104\1\12\1\105\1\12\1\106\1\0"+
    "\3\12\5\0\6\12\1\107\7\12\27\0\1\110\7\0"+
    "\1\111\74\0\3\12\1\0\2\12\1\0\3\12\2\0"+
    "\7\12\1\0\3\12\5\0\4\12\1\112\5\12\1\113"+
    "\3\12\27\0\1\114\13\0\1\115\66\0\1\116\1\117"+
    "\13\0\1\120\67\0\3\12\1\0\2\12\1\0\3\12"+
    "\2\0\7\12\1\0\3\12\5\0\2\12\1\121\13\12"+
    "\31\0\3\12\1\0\2\12\1\0\3\12\2\0\7\12"+
    "\1\0\3\12\5\0\2\12\1\122\13\12\31\0\3\12"+
    "\1\0\2\12\1\0\3\12\2\0\7\12\1\0\3\12"+
    "\5\0\5\12\1\123\10\12\31\0\3\12\1\0\1\124"+
    "\1\12\1\0\3\12\2\0\3\12\1\125\3\12\1\0"+
    "\3\12\5\0\2\12\1\126\13\12\16\0\16\127\1\130"+
    "\17\127\1\131\44\127\13\0\3\12\1\0\2\12\1\0"+
    "\3\12\2\0\7\12\1\0\2\12\1\132\5\0\16\12"+
    "\31\0\3\12\1\0\2\12\1\0\3\12\2\0\7\12"+
    "\1\0\2\12\1\133\5\0\13\12\1\134\2\12\31\0"+
    "\3\12\1\0\2\12\1\0\2\12\1\135\2\0\7\12"+
    "\1\0\3\12\5\0\16\12\16\0\16\136\1\137\23\136"+
    "\1\140\40\136\11\0\1\141\31\0\1\142\37\0\44\143"+
    "\1\144\36\143\13\0\3\12\1\0\2\12\1\0\3\12"+
    "\2\0\3\12\1\145\2\12\1\146\1\0\1\147\2\12"+
    "\5\0\16\12\31\0\3\12\1\0\2\12\1\0\3\12"+
    "\2\0\7\12\1\0\3\12\5\0\2\12\1\150\1\12"+
    "\1\151\1\152\10\12\31\0\3\12\1\0\2\12\1\0"+
    "\3\12\2\0\7\12\1\0\1\153\2\12\5\0\1\154"+
    "\5\12\1\155\7\12\31\0\3\12\1\0\2\12\1\0"+
    "\3\12\2\0\3\12\1\156\3\12\1\0\3\12\5\0"+
    "\5\12\1\157\6\12\1\160\1\12\31\0\3\12\1\0"+
    "\1\161\1\12\1\0\3\12\2\0\7\12\1\0\3\12"+
    "\5\0\16\12\31\0\3\12\1\0\2\12\1\0\3\12"+
    "\2\0\7\12\1\0\3\12\5\0\2\12\1\162\2\12"+
    "\1\163\10\12\31\0\3\12\1\0\2\12\1\0\3\12"+
    "\2\0\7\12\1\0\3\12\5\0\13\12\1\164\2\12"+
    "\110\0\1\165\31\0\1\166\72\0\1\167\102\0\1\170"+
    "\63\0\1\171\16\0\1\172\102\0\1\173\102\0\1\174"+
    "\102\0\1\175\71\0\2\65\1\176\1\177\77\65\10\66"+
    "\1\200\72\66\11\0\1\201\106\0\1\202\3\0\1\76"+
    "\1\77\4\0\2\100\5\101\62\0\1\203\102\0\1\204"+
    "\100\0\3\12\1\0\2\12\1\0\3\12\2\0\5\12"+
    "\1\205\1\12\1\0\3\12\5\0\16\12\31\0\3\12"+
    "\1\0\2\12\1\0\3\12\2\0\7\12\1\0\1\12"+
    "\1\206\1\12\5\0\16\12\37\0\1\207\74\0\3\12"+
    "\1\0\2\12\1\0\3\12\2\0\7\12\1\0\3\12"+
    "\5\0\6\12\1\210\7\12\31\0\3\12\1\0\1\211"+
    "\1\12\1\0\3\12\2\0\7\12\1\0\1\12\1\212"+
    "\1\12\5\0\16\12\31\0\3\12\1\0\2\12\1\0"+
    "\3\12\2\0\7\12\1\0\3\12\5\0\1\213\15\12"+
    "\31\0\3\12\1\0\2\12\1\0\3\12\2\0\4\12"+
    "\1\214\2\12\1\0\3\12\5\0\16\12\31\0\3\12"+
    "\1\0\2\12\1\0\3\12\2\0\7\12\1\0\3\12"+
    "\5\0\3\12\1\215\12\12\31\0\3\12\1\0\2\12"+
    "\1\0\3\12\2\0\4\12\1\216\2\12\1\0\3\12"+
    "\5\0\16\12\31\0\3\12\1\0\2\12\1\0\3\12"+
    "\2\0\4\12\1\217\2\12\1\0\3\12\5\0\16\12"+
    "\31\0\3\12\1\0\2\12\1\0\3\12\2\0\7\12"+
    "\1\0\2\12\1\220\5\0\16\12\16\0\16\127\1\0"+
    "\17\127\1\131\44\127\33\0\1\221\1\0\5\221\1\222"+
    "\1\0\1\221\1\223\50\0\3\12\1\0\2\12\1\0"+
    "\2\12\1\224\2\0\7\12\1\0\3\12\5\0\16\12"+
    "\31\0\3\12\1\0\2\12\1\0\3\12\2\0\7\12"+
    "\1\0\3\12\5\0\15\12\1\225\31\0\3\12\1\0"+
    "\1\226\1\12\1\0\2\12\1\227\2\0\7\12\1\0"+
    "\2\12\1\230\5\0\16\12\31\0\3\12\1\0\2\12"+
    "\1\0\3\12\2\0\7\12\1\0\1\12\1\231\1\12"+
    "\5\0\16\12\51\0\1\136\1\0\5\136\1\232\1\0"+
    "\1\136\1\233\46\0\1\234\104\0\3\12\1\0\2\12"+
    "\1\0\3\12\2\0\7\12\1\0\1\12\1\235\1\12"+
    "\5\0\16\12\31\0\3\12\1\0\2\12\1\0\3\12"+
    "\2\0\7\12\1\0\3\12\5\0\7\12\1\236\6\12"+
    "\31\0\3\12\1\0\2\12\1\0\3\12\2\0\4\12"+
    "\1\237\2\12\1\0\3\12\5\0\16\12\31\0\3\12"+
    "\1\0\2\12\1\0\3\12\2\0\7\12\1\0\3\12"+
    "\5\0\5\12\1\240\10\12\31\0\3\12\1\0\2\12"+
    "\1\0\3\12\2\0\7\12\1\0\1\12\1\241\1\12"+
    "\5\0\6\12\1\242\7\12\31\0\3\12\1\0\2\12"+
    "\1\0\3\12\2\0\7\12\1\0\3\12\5\0\6\12"+
    "\1\243\7\12\31\0\3\12\1\0\2\12\1\0\3\12"+
    "\2\0\7\12\1\0\3\12\5\0\5\12\1\244\10\12"+
    "\31\0\3\12\1\0\2\12\1\0\3\12\2\0\7\12"+
    "\1\0\3\12\5\0\6\12\1\245\7\12\31\0\3\12"+
    "\1\0\2\12\1\0\3\12\2\0\5\12\1\246\1\12"+
    "\1\0\3\12\5\0\16\12\31\0\3\12\1\0\2\12"+
    "\1\0\3\12\2\0\7\12\1\0\1\12\1\247\1\12"+
    "\5\0\16\12\31\0\3\12\1\0\1\250\1\12\1\0"+
    "\3\12\2\0\7\12\1\0\3\12\5\0\16\12\31\0"+
    "\3\12\1\0\2\12\1\0\3\12\2\0\7\12\1\0"+
    "\3\12\5\0\11\12\1\251\4\12\31\0\3\12\1\0"+
    "\1\252\1\12\1\0\3\12\2\0\7\12\1\0\3\12"+
    "\5\0\16\12\31\0\3\12\1\0\2\12\1\0\3\12"+
    "\2\0\7\12\1\0\3\12\5\0\4\12\1\253\11\12"+
    "\31\0\3\12\1\0\1\254\1\12\1\0\3\12\2\0"+
    "\7\12\1\0\3\12\5\0\16\12\37\0\1\255\72\0"+
    "\1\256\103\0\1\257\72\0\1\176\100\0\5\66\1\260"+
    "\2\66\1\200\72\66\15\0\1\261\3\0\1\76\1\77"+
    "\4\0\2\100\5\101\62\0\1\262\5\0\2\263\2\0"+
    "\7\101\62\0\1\264\100\0\3\12\1\0\2\12\1\0"+
    "\3\12\2\0\7\12\1\0\3\12\5\0\2\12\1\265"+
    "\13\12\31\0\3\12\1\0\2\12\1\0\2\12\1\266"+
    "\2\0\7\12\1\0\3\12\5\0\16\12\31\0\3\12"+
    "\1\0\2\12\1\0\2\12\1\267\2\0\7\12\1\0"+
    "\3\12\5\0\16\12\31\0\3\12\1\0\2\12\1\0"+
    "\3\12\2\0\7\12\1\0\3\12\5\0\6\12\1\270"+
    "\7\12\31\0\3\12\1\0\2\12\1\0\2\12\1\271"+
    "\2\0\7\12\1\0\3\12\5\0\16\12\31\0\3\12"+
    "\1\0\2\12\1\0\3\12\2\0\3\12\1\272\3\12"+
    "\1\0\3\12\5\0\16\12\31\0\3\12\1\0\2\12"+
    "\1\0\2\12\1\273\2\0\7\12\1\0\3\12\5\0"+
    "\16\12\31\0\3\12\1\0\2\12\1\0\3\12\2\0"+
    "\1\274\6\12\1\0\3\12\5\0\16\12\31\0\3\12"+
    "\1\0\2\12\1\0\3\12\2\0\7\12\1\0\3\12"+
    "\5\0\5\12\1\275\10\12\31\0\3\12\1\0\2\12"+
    "\1\0\3\12\2\0\7\12\1\0\3\12\5\0\3\12"+
    "\1\276\12\12\54\0\1\131\50\0\1\277\113\0\1\300"+
    "\5\0\2\300\10\0\1\300\1\0\1\300\7\0\2\300"+
    "\1\0\1\300\1\0\1\300\41\0\3\12\1\0\2\12"+
    "\1\0\3\12\2\0\7\12\1\0\3\12\5\0\5\12"+
    "\1\301\10\12\31\0\3\12\1\0\2\12\1\0\3\12"+
    "\2\0\7\12\1\0\3\12\5\0\6\12\1\302\7\12"+
    "\31\0\3\12\1\0\2\12\1\0\3\12\2\0\4\12"+
    "\1\303\2\12\1\0\3\12\5\0\16\12\31\0\3\12"+
    "\1\0\2\12\1\0\3\12\2\0\7\12\1\0\3\12"+
    "\5\0\2\12\1\304\13\12\31\0\3\12\1\0\2\12"+
    "\1\0\3\12\2\0\3\12\1\305\3\12\1\0\3\12"+
    "\5\0\16\12\22\0\1\306\113\0\1\307\5\0\2\307"+
    "\10\0\1\307\1\0\1\307\7\0\2\307\1\0\1\307"+
    "\1\0\1\307\41\0\3\12\1\0\2\12\1\0\2\12"+
    "\1\310\2\0\7\12\1\0\3\12\5\0\16\12\31\0"+
    "\3\12\1\0\2\12\1\0\2\12\1\311\2\0\7\12"+
    "\1\0\3\12\5\0\16\12\31\0\3\12\1\0\2\12"+
    "\1\0\3\12\2\0\7\12\1\0\1\12\1\312\1\12"+
    "\5\0\16\12\31\0\3\12\1\0\2\12\1\0\3\12"+
    "\2\0\7\12\1\0\3\12\5\0\6\12\1\313\7\12"+
    "\31\0\3\12\1\0\2\12\1\0\3\12\2\0\7\12"+
    "\1\0\3\12\5\0\3\12\1\314\12\12\31\0\3\12"+
    "\1\0\2\12\1\0\2\12\1\315\2\0\7\12\1\0"+
    "\3\12\5\0\16\12\31\0\3\12\1\0\2\12\1\0"+
    "\3\12\2\0\7\12\1\0\1\12\1\316\1\12\5\0"+
    "\16\12\31\0\3\12\1\0\2\12\1\0\3\12\2\0"+
    "\5\12\1\317\1\12\1\0\3\12\5\0\16\12\31\0"+
    "\3\12\1\0\1\320\1\12\1\0\3\12\2\0\7\12"+
    "\1\0\3\12\5\0\16\12\31\0\3\12\1\0\2\12"+
    "\1\0\2\12\1\321\2\0\7\12\1\0\3\12\5\0"+
    "\16\12\31\0\3\12\1\0\1\322\1\12\1\0\3\12"+
    "\2\0\7\12\1\0\3\12\5\0\16\12\31\0\3\12"+
    "\1\0\2\12\1\0\3\12\2\0\7\12\1\0\1\12"+
    "\1\323\1\12\5\0\16\12\31\0\3\12\1\0\2\12"+
    "\1\0\2\12\1\324\2\0\7\12\1\0\3\12\5\0"+
    "\16\12\31\0\3\12\1\0\2\12\1\0\3\12\2\0"+
    "\7\12\1\0\3\12\5\0\1\325\15\12\31\0\3\12"+
    "\1\0\2\12\1\0\3\12\2\0\3\12\1\326\3\12"+
    "\1\0\3\12\5\0\16\12\31\0\3\12\1\0\2\12"+
    "\1\0\3\12\2\0\7\12\1\0\3\12\5\0\4\12"+
    "\1\327\11\12\33\0\1\261\3\0\1\76\5\0\2\100"+
    "\5\101\62\0\1\330\5\0\2\263\2\0\7\101\62\0"+
    "\1\331\7\0\2\332\71\0\1\333\100\0\3\12\1\0"+
    "\2\12\1\0\3\12\2\0\7\12\1\0\2\12\1\334"+
    "\5\0\16\12\31\0\3\12\1\0\2\12\1\0\3\12"+
    "\2\0\7\12\1\0\2\12\1\335\5\0\16\12\31\0"+
    "\3\12\1\0\2\12\1\0\3\12\2\0\7\12\1\0"+
    "\1\12\1\336\1\12\5\0\16\12\31\0\3\12\1\0"+
    "\2\12\1\0\3\12\2\0\4\12\1\337\2\12\1\0"+
    "\3\12\5\0\16\12\31\0\3\12\1\0\2\12\1\0"+
    "\3\12\2\0\7\12\1\0\3\12\5\0\4\12\1\340"+
    "\11\12\31\0\3\12\1\0\2\12\1\0\3\12\2\0"+
    "\2\12\1\341\4\12\1\0\3\12\5\0\16\12\31\0"+
    "\3\12\1\0\2\12\1\0\3\12\2\0\7\12\1\0"+
    "\3\12\5\0\5\12\1\342\10\12\31\0\3\12\1\0"+
    "\2\12\1\0\3\12\2\0\7\12\1\0\3\12\5\0"+
    "\4\12\1\343\11\12\31\0\3\12\1\0\2\12\1\0"+
    "\3\12\2\0\7\12\1\0\1\12\1\344\1\12\5\0"+
    "\16\12\61\0\1\345\54\0\1\346\5\0\2\346\10\0"+
    "\1\346\1\0\1\346\7\0\2\346\1\0\1\346\1\0"+
    "\1\346\41\0\3\12\1\0\2\12\1\0\3\12\2\0"+
    "\1\347\6\12\1\0\3\12\5\0\16\12\31\0\3\12"+
    "\1\0\2\12\1\0\3\12\2\0\7\12\1\0\3\12"+
    "\5\0\14\12\1\350\1\12\31\0\3\12\1\0\2\12"+
    "\1\0\3\12\2\0\7\12\1\0\2\12\1\351\5\0"+
    "\16\12\61\0\1\352\54\0\1\353\5\0\2\353\10\0"+
    "\1\353\1\0\1\353\7\0\2\353\1\0\1\353\1\0"+
    "\1\353\41\0\3\12\1\0\2\12\1\0\3\12\2\0"+
    "\7\12\1\0\2\12\1\354\5\0\16\12\31\0\3\12"+
    "\1\0\2\12\1\0\3\12\2\0\7\12\1\0\3\12"+
    "\5\0\3\12\1\355\12\12\31\0\3\12\1\0\1\356"+
    "\1\12\1\0\3\12\2\0\7\12\1\0\3\12\5\0"+
    "\16\12\31\0\3\12\1\0\2\12\1\0\3\12\2\0"+
    "\7\12\1\0\3\12\5\0\6\12\1\357\7\12\31\0"+
    "\3\12\1\0\2\12\1\0\3\12\2\0\7\12\1\0"+
    "\3\12\5\0\13\12\1\360\2\12\31\0\3\12\1\0"+
    "\2\12\1\0\3\12\2\0\7\12\1\0\2\12\1\361"+
    "\5\0\16\12\31\0\3\12\1\0\2\12\1\0\3\12"+
    "\2\0\7\12\1\0\1\12\1\362\1\12\5\0\16\12"+
    "\31\0\3\12\1\0\2\12\1\0\3\12\2\0\7\12"+
    "\1\0\3\12\5\0\10\12\1\363\5\12\31\0\3\12"+
    "\1\0\2\12\1\0\3\12\2\0\7\12\1\0\2\12"+
    "\1\364\5\0\16\12\31\0\3\12\1\0\2\12\1\0"+
    "\3\12\2\0\7\12\1\0\3\12\5\0\6\12\1\365"+
    "\7\12\31\0\3\12\1\0\2\12\1\0\3\12\2\0"+
    "\7\12\1\0\3\12\5\0\3\12\1\366\12\12\31\0"+
    "\3\12\1\0\2\12\1\0\3\12\2\0\4\12\1\367"+
    "\2\12\1\0\3\12\5\0\16\12\31\0\3\12\1\0"+
    "\2\12\1\0\2\12\1\370\2\0\7\12\1\0\3\12"+
    "\5\0\16\12\31\0\3\12\1\0\2\12\1\0\2\12"+
    "\1\371\2\0\7\12\1\0\3\12\5\0\16\12\33\0"+
    "\1\372\4\0\1\373\2\263\2\0\7\101\62\0\1\374"+
    "\4\0\1\375\75\0\1\331\106\0\1\76\1\77\4\0"+
    "\2\100\5\101\60\0\3\12\1\0\2\12\1\0\3\12"+
    "\2\0\7\12\1\0\1\12\1\376\1\12\5\0\16\12"+
    "\31\0\3\12\1\0\2\12\1\0\3\12\2\0\6\12"+
    "\1\377\1\0\3\12\5\0\16\12\31\0\3\12\1\0"+
    "\2\12\1\0\3\12\2\0\7\12\1\0\3\12\5\0"+
    "\6\12\1\u0100\7\12\31\0\3\12\1\0\2\12\1\0"+
    "\3\12\2\0\7\12\1\0\3\12\5\0\1\u0101\15\12"+
    "\31\0\3\12\1\0\2\12\1\0\2\12\1\u0102\2\0"+
    "\7\12\1\0\3\12\5\0\16\12\31\0\3\12\1\0"+
    "\2\12\1\0\3\12\2\0\5\12\1\u0103\1\12\1\0"+
    "\3\12\5\0\16\12\31\0\3\12\1\0\2\12\1\0"+
    "\3\12\2\0\7\12\1\0\3\12\5\0\10\12\1\u0104"+
    "\5\12\31\0\3\12\1\0\2\12\1\0\3\12\2\0"+
    "\7\12\1\0\3\12\5\0\4\12\1\u0105\11\12\31\0"+
    "\3\12\1\0\1\u0106\1\12\1\0\3\12\2\0\7\12"+
    "\1\0\3\12\5\0\16\12\22\0\1\221\113\0\1\u0107"+
    "\5\0\2\u0107\10\0\1\u0107\1\0\1\u0107\7\0\2\u0107"+
    "\1\0\1\u0107\1\0\1\u0107\41\0\3\12\1\0\2\12"+
    "\1\0\3\12\2\0\4\12\1\u0108\2\12\1\0\3\12"+
    "\5\0\16\12\22\0\1\136\113\0\1\u0109\5\0\2\u0109"+
    "\10\0\1\u0109\1\0\1\u0109\7\0\2\u0109\1\0\1\u0109"+
    "\1\0\1\u0109\41\0\3\12\1\0\2\12\1\0\3\12"+
    "\2\0\7\12\1\0\1\12\1\u010a\1\12\5\0\16\12"+
    "\31\0\3\12\1\0\2\12\1\0\3\12\2\0\4\12"+
    "\1\u010b\2\12\1\0\3\12\5\0\16\12\31\0\3\12"+
    "\1\0\2\12\1\0\3\12\2\0\7\12\1\0\3\12"+
    "\5\0\5\12\1\u010c\10\12\31\0\3\12\1\0\2\12"+
    "\1\0\3\12\2\0\7\12\1\0\3\12\5\0\6\12"+
    "\1\u010d\7\12\31\0\3\12\1\0\2\12\1\0\3\12"+
    "\2\0\4\12\1\u010e\2\12\1\0\3\12\5\0\16\12"+
    "\31\0\3\12\1\0\2\12\1\0\3\12\2\0\6\12"+
    "\1\u010f\1\0\3\12\5\0\16\12\31\0\3\12\1\0"+
    "\2\12\1\0\3\12\2\0\7\12\1\0\3\12\5\0"+
    "\13\12\1\u0110\2\12\33\0\1\372\5\0\2\263\2\0"+
    "\7\101\62\0\1\u0111\102\0\1\u0112\4\0\1\375\75\0"+
    "\1\u0113\100\0\3\12\1\0\2\12\1\0\3\12\2\0"+
    "\7\12\1\0\3\12\5\0\5\12\1\u0114\10\12\31\0"+
    "\3\12\1\0\2\12\1\0\3\12\2\0\7\12\1\0"+
    "\3\12\5\0\6\12\1\u0115\7\12\31\0\3\12\1\0"+
    "\2\12\1\0\3\12\2\0\7\12\1\0\1\12\1\u0116"+
    "\1\12\5\0\16\12\31\0\3\12\1\0\2\12\1\0"+
    "\2\12\1\u0117\2\0\7\12\1\0\3\12\5\0\16\12"+
    "\31\0\3\12\1\0\2\12\1\0\3\12\2\0\7\12"+
    "\1\0\3\12\5\0\15\12\1\u0118\31\0\3\12\1\0"+
    "\2\12\1\0\3\12\2\0\7\12\1\0\3\12\5\0"+
    "\2\12\1\u0119\13\12\33\0\1\u011a\5\0\2\u011a\10\0"+
    "\1\u011a\1\0\1\u011a\7\0\2\u011a\1\0\1\u011a\1\0"+
    "\1\u011a\43\0\1\u011b\5\0\2\u011b\10\0\1\u011b\1\0"+
    "\1\u011b\7\0\2\u011b\1\0\1\u011b\1\0\1\u011b\41\0"+
    "\3\12\1\0\2\12\1\0\3\12\2\0\3\12\1\u011c"+
    "\3\12\1\0\3\12\5\0\16\12\31\0\3\12\1\0"+
    "\2\12\1\0\3\12\2\0\7\12\1\0\3\12\5\0"+
    "\3\12\1\u011d\12\12\31\0\3\12\1\0\1\u011e\1\12"+
    "\1\0\3\12\2\0\7\12\1\0\3\12\5\0\16\12"+
    "\33\0\1\u011f\5\0\2\263\2\0\7\101\62\0\1\u0120"+
    "\4\0\1\375\75\0\1\u0121\100\0\3\12\1\0\2\12"+
    "\1\0\3\12\2\0\7\12\1\0\3\12\5\0\3\12"+
    "\1\u0122\12\12\31\0\3\12\1\0\2\12\1\0\3\12"+
    "\2\0\7\12\1\0\3\12\5\0\15\12\1\u0123\31\0"+
    "\3\12\1\0\2\12\1\0\3\12\2\0\4\12\1\u0124"+
    "\2\12\1\0\3\12\5\0\16\12\33\0\1\u0125\5\0"+
    "\2\u0125\10\0\1\u0125\1\0\1\u0125\6\0\1\221\2\u0125"+
    "\1\0\1\u0125\1\0\1\u0125\43\0\1\u0126\5\0\2\u0126"+
    "\10\0\1\u0126\1\0\1\u0126\6\0\1\136\2\u0126\1\0"+
    "\1\u0126\1\0\1\u0126\41\0\3\12\1\0\2\12\1\0"+
    "\2\12\1\u0127\2\0\7\12\1\0\3\12\5\0\16\12"+
    "\31\0\3\12\1\0\2\12\1\0\3\12\2\0\7\12"+
    "\1\0\1\12\1\u0128\1\12\5\0\16\12\31\0\3\12"+
    "\1\0\2\12\1\0\2\12\1\u0129\2\0\7\12\1\0"+
    "\3\12\5\0\16\12\33\0\1\u012a\5\0\2\263\2\0"+
    "\7\101\62\0\1\u0120\102\0\1\u012b\100\0\3\12\1\0"+
    "\2\12\1\0\2\12\1\u012c\2\0\7\12\1\0\3\12"+
    "\5\0\16\12\33\0\1\u012d\5\0\2\u012d\10\0\1\u012d"+
    "\1\0\1\u012d\7\0\2\u012d\1\0\1\u012d\1\0\1\u012d"+
    "\43\0\1\u012e\5\0\2\u012e\10\0\1\u012e\1\0\1\u012e"+
    "\7\0\2\u012e\1\0\1\u012e\1\0\1\u012e\41\0\3\12"+
    "\1\0\2\12\1\0\3\12\2\0\7\12\1\0\3\12"+
    "\5\0\6\12\1\u012f\7\12\31\0\3\12\1\0\2\12"+
    "\1\0\3\12\2\0\7\12\1\0\3\12\5\0\6\12"+
    "\1\u0130\7\12\40\0\1\373\2\263\2\0\7\101\67\0"+
    "\1\375\75\0\1\u0131\5\0\2\u0131\10\0\1\u0131\1\0"+
    "\1\u0131\7\0\2\u0131\1\0\1\u0131\1\0\1\u0131\43\0"+
    "\1\u0132\5\0\2\u0132\10\0\1\u0132\1\0\1\u0132\7\0"+
    "\2\u0132\1\0\1\u0132\1\0\1\u0132\43\0\1\u0133\5\0"+
    "\2\u0133\10\0\1\u0133\1\0\1\u0133\7\0\2\u0133\1\0"+
    "\1\u0133\1\0\1\u0133\43\0\1\u0134\5\0\2\u0134\10\0"+
    "\1\u0134\1\0\1\u0134\7\0\2\u0134\1\0\1\u0134\1\0"+
    "\1\u0134\74\0\1\221\102\0\1\136\34\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[15276];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\32\1\2\11\7\1\4\11\1\1\1\11"+
    "\7\1\1\11\2\1\4\11\1\1\1\11\1\1\2\0"+
    "\2\11\2\0\4\1\1\11\3\1\5\11\6\1\2\0"+
    "\1\11\4\1\2\0\2\11\1\1\1\0\1\11\21\1"+
    "\3\11\1\1\2\11\1\1\2\11\2\1\1\11\2\1"+
    "\1\0\2\1\1\11\11\1\3\0\6\1\2\0\1\11"+
    "\20\1\4\11\2\1\2\0\12\1\2\0\5\1\2\0"+
    "\22\1\1\0\12\1\2\0\3\1\2\0\17\1\1\0"+
    "\1\1\1\0\11\1\1\0\1\1\1\0\11\1\1\0"+
    "\6\1\2\0\5\1\1\0\3\1\2\0\6\1\2\0"+
    "\2\1\4\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[308];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  _CeylonLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  _CeylonLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 162) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  // For Demetra compatibility
  public void reset(CharSequence buffer, int initialState){
    zzBuffer = buffer;
    zzBufferArray = null; 
    zzCurrentPos = zzMarkedPos = zzStartRead = 0;
    zzPushbackPos = 0;
    zzAtEOF = false;
    zzAtBOL = true;
    zzEndRead = buffer.length();
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = zzLexicalState;


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 5: 
          { return CeylonTypes.OP_NOT;
          }
        case 105: break;
        case 92: 
          { return CeylonTypes.KW_OBJECT;
          }
        case 106: break;
        case 23: 
          { return CeylonTypes.OP_RBRACKET;
          }
        case 107: break;
        case 90: 
          { return CeylonTypes.KW_MODULE;
          }
        case 108: break;
        case 50: 
          { return CeylonTypes.CHAR_LITERAL;
          }
        case 109: break;
        case 11: 
          { return CeylonTypes.NATURAL_LITERAL;
          }
        case 110: break;
        case 79: 
          { return CeylonTypes.KW_BREAK;
          }
        case 111: break;
        case 29: 
          { return CeylonTypes.OP_LT;
          }
        case 112: break;
        case 84: 
          { return CeylonTypes.KW_SUPER;
          }
        case 113: break;
        case 43: 
          { return CeylonTypes.OP_DOT_EQ;
          }
        case 114: break;
        case 39: 
          { return CeylonTypes.FLOAT_LITERAL;
          }
        case 115: break;
        case 95: 
          { return CeylonTypes.KW_SWITCH;
          }
        case 116: break;
        case 38: 
          { return CeylonTypes.OP_GTE;
          }
        case 117: break;
        case 68: 
          { return CeylonTypes.KW_TRY;
          }
        case 118: break;
        case 17: 
          { return CeylonTypes.OP_RBRACE;
          }
        case 119: break;
        case 16: 
          { return CeylonTypes.OP_LBRACE;
          }
        case 120: break;
        case 74: 
          { return CeylonTypes.KW_ELSE;
          }
        case 121: break;
        case 35: 
          { return CeylonTypes.OP_MULT_MULT;
          }
        case 122: break;
        case 44: 
          { return CeylonTypes.OP_DOT_DOT;
          }
        case 123: break;
        case 97: 
          { return CeylonTypes.KW_PACKAGE;
          }
        case 124: break;
        case 3: 
          { return CeylonTypes.OP_DIVIDE;
          }
        case 125: break;
        case 52: 
          { return CeylonTypes.OP_OR_EQ;
          }
        case 126: break;
        case 104: 
          { return CeylonTypes.KW_SATISFIES;
          }
        case 127: break;
        case 76: 
          { return CeylonTypes.KW_THEN;
          }
        case 128: break;
        case 40: 
          { return CeylonTypes.KW_IN;
          }
        case 129: break;
        case 61: 
          { return CeylonTypes.OP_NOT_EQ;
          }
        case 130: break;
        case 71: 
          { return CeylonTypes.OP_BRACKETS_DOT;
          }
        case 131: break;
        case 60: 
          { return CeylonTypes.OP_LOGICAL_AND;
          }
        case 132: break;
        case 22: 
          { return CeylonTypes.OP_LBRACKET;
          }
        case 133: break;
        case 63: 
          { return CeylonTypes.OP_LTE;
          }
        case 134: break;
        case 8: 
          { return CeylonTypes.OP_GT;
          }
        case 135: break;
        case 99: 
          { return CeylonTypes.KW_NONEMPTY;
          }
        case 136: break;
        case 77: 
          { return CeylonTypes.KW_CASE;
          }
        case 137: break;
        case 83: 
          { return CeylonTypes.KW_CATCH;
          }
        case 138: break;
        case 75: 
          { return CeylonTypes.KW_THIS;
          }
        case 139: break;
        case 64: 
          { return CeylonTypes.OP_ASSIGN;
          }
        case 140: break;
        case 85: 
          { return CeylonTypes.KW_GIVEN;
          }
        case 141: break;
        case 45: 
          { return CeylonTypes.OP_PLUS_EQ;
          }
        case 142: break;
        case 14: 
          { return CeylonTypes.OP_MINUS;
          }
        case 143: break;
        case 2: 
          { return TokenType.WHITE_SPACE;
          }
        case 144: break;
        case 25: 
          { return CeylonTypes.OP_MODULO;
          }
        case 145: break;
        case 56: 
          { return CeylonTypes.OP_BRACKETS;
          }
        case 146: break;
        case 55: 
          { return CeylonTypes.KW_OF;
          }
        case 147: break;
        case 9: 
          { return CeylonTypes.LIDENTIFIER;
          }
        case 148: break;
        case 94: 
          { return CeylonTypes.KW_ASSIGN;
          }
        case 149: break;
        case 72: 
          { return CeylonTypes.OP_LOG_AND_EQ;
          }
        case 150: break;
        case 31: 
          { return CeylonTypes.LINE_COMMENT;
          }
        case 151: break;
        case 101: 
          { return CeylonTypes.KW_CONTINUE;
          }
        case 152: break;
        case 42: 
          { return CeylonTypes.KW_IS;
          }
        case 153: break;
        case 82: 
          { return CeylonTypes.KW_CLASS;
          }
        case 154: break;
        case 88: 
          { return CeylonTypes.KW_IMPORT;
          }
        case 155: break;
        case 89: 
          { return CeylonTypes.KW_EXISTS;
          }
        case 156: break;
        case 10: 
          { return CeylonTypes.UIDENTIFIER;
          }
        case 157: break;
        case 21: 
          { return CeylonTypes.OP_RPAREN;
          }
        case 158: break;
        case 59: 
          { return CeylonTypes.OP_AND_EQ;
          }
        case 159: break;
        case 58: 
          { return CeylonTypes.OP_MOD_EQ;
          }
        case 160: break;
        case 20: 
          { return CeylonTypes.OP_LPAREN;
          }
        case 161: break;
        case 48: 
          { return CeylonTypes.OP_ARROW;
          }
        case 162: break;
        case 98: 
          { return CeylonTypes.KW_FINALLY;
          }
        case 163: break;
        case 15: 
          { return CeylonTypes.OP_UNION;
          }
        case 164: break;
        case 93: 
          { return CeylonTypes.KW_ADAPTS;
          }
        case 165: break;
        case 6: 
          { return CeylonTypes.OP_MULTIPLY;
          }
        case 166: break;
        case 100: 
          { return CeylonTypes.KW_FUNCTION;
          }
        case 167: break;
        case 30: 
          { return CeylonTypes.OP_ANNOTATION;
          }
        case 168: break;
        case 41: 
          { return CeylonTypes.KW_IF;
          }
        case 169: break;
        case 78: 
          { return CeylonTypes.KW_VOID;
          }
        case 170: break;
        case 34: 
          { return CeylonTypes.OP_EXCL_EQ;
          }
        case 171: break;
        case 65: 
          { return CeylonTypes.OP_EQ_EQ_EQ;
          }
        case 172: break;
        case 81: 
          { return CeylonTypes.KW_OUTER;
          }
        case 173: break;
        case 1: 
          { return TokenType.BAD_CHARACTER;
          }
        case 174: break;
        case 36: 
          { return CeylonTypes.OP_MULT_EQ;
          }
        case 175: break;
        case 28: 
          { return CeylonTypes.OP_XOR;
          }
        case 176: break;
        case 102: 
          { return CeylonTypes.KW_INTERFACE;
          }
        case 177: break;
        case 80: 
          { return CeylonTypes.KW_THROW;
          }
        case 178: break;
        case 7: 
          { return CeylonTypes.OP_EQUALS;
          }
        case 179: break;
        case 4: 
          { return CeylonTypes.OP_SHARP;
          }
        case 180: break;
        case 66: 
          { return CeylonTypes.OP_ELLIPSIS;
          }
        case 181: break;
        case 27: 
          { return CeylonTypes.OP_TIDLE;
          }
        case 182: break;
        case 70: 
          { return CeylonTypes.KW_OUT;
          }
        case 183: break;
        case 53: 
          { return CeylonTypes.OP_LOGICAL_OR;
          }
        case 184: break;
        case 47: 
          { return CeylonTypes.OP_MINUS_EQ;
          }
        case 185: break;
        case 57: 
          { return CeylonTypes.OP_DOT_QUESTION;
          }
        case 186: break;
        case 12: 
          { return CeylonTypes.OP_DOT;
          }
        case 187: break;
        case 33: 
          { return CeylonTypes.OP_DIV_EQ;
          }
        case 188: break;
        case 19: 
          { return CeylonTypes.OP_SEMI_COLUMN;
          }
        case 189: break;
        case 51: 
          { return CeylonTypes.STRING_LITERAL;
          }
        case 190: break;
        case 62: 
          { return CeylonTypes.OP_XOR_EQ;
          }
        case 191: break;
        case 103: 
          { return CeylonTypes.KW_ABSTRACTS;
          }
        case 192: break;
        case 86: 
          { return CeylonTypes.KW_VALUE;
          }
        case 193: break;
        case 96: 
          { return CeylonTypes.KW_EXTENDS;
          }
        case 194: break;
        case 24: 
          { return CeylonTypes.OP_QUESTION;
          }
        case 195: break;
        case 18: 
          { return CeylonTypes.OP_COMMA;
          }
        case 196: break;
        case 54: 
          { return CeylonTypes.QUOTED_LITERAL;
          }
        case 197: break;
        case 26: 
          { return CeylonTypes.OP_INTERSECTION;
          }
        case 198: break;
        case 49: 
          { return CeylonTypes.OP_MIN_MIN;
          }
        case 199: break;
        case 87: 
          { return CeylonTypes.KW_WHILE;
          }
        case 200: break;
        case 46: 
          { return CeylonTypes.OP_PLUS_PLUS;
          }
        case 201: break;
        case 13: 
          { return CeylonTypes.OP_PLUS;
          }
        case 202: break;
        case 91: 
          { return CeylonTypes.KW_RETURN;
          }
        case 203: break;
        case 37: 
          { return CeylonTypes.OP_EQ_EQ;
          }
        case 204: break;
        case 32: 
          { return CeylonTypes.MULTI_LINE_COMMENT;
          }
        case 205: break;
        case 67: 
          { return CeylonTypes.KW_FOR;
          }
        case 206: break;
        case 69: 
          { return CeylonTypes.OP_LOG_OR_EQ;
          }
        case 207: break;
        case 73: 
          { return CeylonTypes.OP_DIFFERENT;
          }
        case 208: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
