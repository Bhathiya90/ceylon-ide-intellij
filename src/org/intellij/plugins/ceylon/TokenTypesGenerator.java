package org.intellij.plugins.ceylon;

import com.redhat.ceylon.compiler.typechecker.parser.CeylonLexer;

import java.io.FileOutputStream;
import java.io.IOException;
import java.lang.reflect.Field;

/**
 * Generates TokenTypes.java using tokens recognized by CeylonLexer.java.
 */
public class TokenTypesGenerator {

    public static void main(String[] args) throws IOException, IllegalAccessException {
        FileOutputStream os = new FileOutputStream("gen/org/intellij/plugins/ceylon/psi/TokenTypes.java");

        os.write("// Automatically generated by TokenTypesGenerator.java, do not edit!\n".getBytes());
        os.write(("package org.intellij.plugins.ceylon.psi;\n\n" +
                "import com.intellij.psi.tree.IElementType;\n\n" +
                "import java.lang.reflect.Field;\n" +
                "import java.util.HashMap;\n" +
                "import java.util.Map;\n\n").getBytes());
        os.write("public enum TokenTypes {\n\n".getBytes());

        for (Field field : CeylonLexer.class.getFields()) {
            if (field.getDeclaringClass() == CeylonLexer.class) {
                os.write(("    " + field.getName() + "(" + field.get(null) + "),\n").getBytes());
            }
        }

        os.write("\n    ;\n\n".getBytes());

        os.write(("    static final Map<IElementType, TokenTypes> byIElementType = new HashMap<>();\n" +
                "    static final Map<Integer, TokenTypes> byIndex = new HashMap<>();\n" +
                "\n" +
                "    static {\n" +
                "        final Field[] fields = CeylonTokens.class.getDeclaredFields();\n" +
                "        final Map<String, IElementType> ceylonTokensFields = new HashMap<>();\n" +
                "        for (Field tokenField : fields) {\n" +
                "            try {\n" +
                "                final IElementType elt = (IElementType) tokenField.get(null);\n" +
                "                ceylonTokensFields.put(tokenField.getName(), elt);\n" +
                "            } catch (IllegalAccessException e) {\n" +
                "                throw new RuntimeException(\"Error accesing CeylonTypes fields.\", e);\n" +
                "            }\n" +
                "        }\n" +
                "        for (TokenTypes tokenType : values()) {\n" +
                "            tokenType.tokenType = ceylonTokensFields.get(tokenType.name());\n" +
                "            byIElementType.put(tokenType.tokenType, tokenType);\n" +
                "            byIndex.put(tokenType.getValue(), tokenType);\n" +
                "        }\n" +
                "    }\n" +
                "\n" +
                "    private final int value;\n" +
                "    private IElementType tokenType;\n" +
                "    \n" +
                "    private TokenTypes(int value) {\n" +
                "        this.value = value;\n" +
                "    }\n" +
                "\n" +
                "    public IElementType getTokenType() {\n" +
                "        return tokenType;\n" +
                "    }\n" +
                "    \n" +
                "    public int getValue() {\n" +
                "        return value;\n" +
                "    }\n" +
                "\n" +
                "    public static IElementType fromInt(int value) {\n" +
                "        final TokenTypes tt = byIndex.get(value);\n" +
                "        assertNotNull(value, tt);\n" +
                "        return tt.tokenType;\n" +
                "    }\n" +
                "\n" +
                "    public static TokenTypes get(IElementType key) {\n" +
                "        final TokenTypes tt = byIElementType.get(key);\n" +
                "        assertNotNull(key, tt);\n" +
                "        return tt;\n" +
                "    }\n" +
                "\n" +
                "    private static void assertNotNull(Object key, TokenTypes tt) {\n" +
                "        if (tt == null) {\n" +
                "            throw new IllegalArgumentException(\"Unknown token type: \" + key);\n" +
                "        }\n" +
                "    }\n" +
                "}").getBytes());
        os.close();
    }
}
