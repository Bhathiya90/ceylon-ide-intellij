package org.intellij.plugins.ceylon.psi;

import com.intellij.psi.PsiElement;
import com.intellij.psi.PsiFile;
import com.intellij.psi.util.PsiTreeUtil;
import com.intellij.psi.util.PsiUtilCore;
import com.redhat.ceylon.compiler.typechecker.tree.Node;
import com.redhat.ceylon.compiler.typechecker.tree.Tree;

public class CeylonTreeUtil {

    /**
     * Finds a PSI element corresponding to the original Node in a given file.
     *
     * @param ceylonNode the node to look for
     * @param file where the PSI node is expected to be
     * @return the corresponding PSI element
     */
    public static PsiElement findPsiElement(Node ceylonNode, PsiFile file) {
        PsiElement psiNode = PsiUtilCore.getElementAtOffset(file, ceylonNode.getStartIndex());

        if (ceylonNode instanceof Tree.Declaration && !(psiNode instanceof CeylonPsi.DeclarationPsi)) {
            psiNode = PsiTreeUtil.getParentOfType(psiNode, CeylonPsi.DeclarationPsi.class);

            if (psiNode.getNode().findChildByType(CeylonTypes.IDENTIFIER) == null && psiNode.getLastChild() instanceof CeylonPsi.DeclarationPsi) {
                // Most likely those inner children generated by the parser
                psiNode = psiNode.getLastChild();
            }
        }

        assert (psiNode instanceof CeylonCompositeElement) && (((CeylonCompositeElement) psiNode).getCeylonNode() == ceylonNode);

        return psiNode;
    }
}
